{"version":3,"sources":["firebase/config.js","hooks/useFirestore.js","comps/ImageGrid.js","comps/Title.js","hooks/useStorage.js","comps/ProgressBar.js","comps/UploadForm.js","comps/PasswordBox.js","App.js","index.js"],"names":["firebase","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","projectStorage","getStorage","projectFirestore","getFirestore","timestamp","serverTimestamp","useFirestore","collectionName","useState","docs","setDocs","useEffect","q","query","collection","orderBy","limit","unsub","onSnapshot","querySnapshot","documents","forEach","doc","push","data","id","ImageGrid","className","map","docile","key","src","url","alt","Title","useStorage","file","progress","setProgress","error","setError","setUrl","storageRef","ref","name","collectionRef","uploadTask","uploadBytesResumable","on","snapshot","percentage","bytesTransferred","totalBytes","err","getDownloadURL","then","a","createdAt","setDoc","ProgressBar","setFile","console","log","style","width","UploadForm","types","type","onChange","e","selected","target","files","includes","PasswordBox","setIsValidated","password","setPassword","value","onClick","color","App","isValidated","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d913bc7e.chunk.js","sourcesContent":["// Import the functions you need from the SDKs you need\r\nimport * as firebase from \"firebase/app\";\r\nimport { getStorage } from \"firebase/storage\";\r\nimport { getFirestore, serverTimestamp } from \"firebase/firestore\";\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAhoV9qEzG452GYwpAxnjzMy_e5U6y772U\",\r\n  authDomain: \"dailypablophoto.firebaseapp.com\",\r\n  projectId: \"dailypablophoto\",\r\n  storageBucket: \"dailypablophoto.appspot.com\",\r\n  messagingSenderId: \"150115322143\",\r\n  appId: \"1:150115322143:web:0f3350340c19e470a1882a\",\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nconst projectStorage = getStorage();\r\nconst projectFirestore = getFirestore();\r\nconst timestamp = serverTimestamp;\r\n\r\nexport { projectFirestore, projectStorage, timestamp };\r\n","import { useState, useEffect } from \"react\";\r\nimport { projectFirestore } from \"../firebase/config\";\r\nimport {\r\n  collection,\r\n  query,\r\n  onSnapshot,\r\n  orderBy,\r\n  limit,\r\n} from \"firebase/firestore\";\r\n\r\nconst useFirestore = (collectionName) => {\r\n  const [docs, setDocs] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const q = query(\r\n      collection(projectFirestore, collectionName),\r\n      orderBy(\"createdAt\", \"desc\"),\r\n      limit(1)\r\n    ); //can add later limits to just recent (1)\r\n\r\n    const unsub = onSnapshot(q, (querySnapshot) => {\r\n      let documents = [];\r\n      querySnapshot.forEach((doc) => {\r\n        documents.push({ ...doc.data(), id: doc.id });\r\n        setDocs(documents);\r\n      });\r\n    });\r\n\r\n    return () => unsub(); //questionable\r\n  }, [collectionName]);\r\n  return { docs };\r\n};\r\n\r\nexport default useFirestore;\r\n","import React from \"react\";\r\nimport useFirestore from \"../hooks/useFirestore\";\r\n\r\nconst ImageGrid = () => {\r\n  const { docs } = useFirestore(\"images\");\r\n\r\n  return (\r\n    <div className=\"img-grid\">\r\n      {docs &&\r\n        docs.map((docile) => {\r\n          return (\r\n            <div className=\"img-wrap\" key={docile.id}>\r\n              <img\r\n                className=\"pabloo\"\r\n                src={docile.url}\r\n                alt=\"pablo being kinda crazy\"\r\n              />\r\n            </div>\r\n          );\r\n        })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageGrid;\r\n","import React from \"react\";\n\nconst Title = () => {\n  return (\n    <div className=\"title\">\n      <h1>DailyPabloPhoto</h1>\n    </div>\n  );\n};\n\nexport default Title;\n","import { useState, useEffect } from \"react\";\r\nimport {\r\n  projectStorage,\r\n  projectFirestore,\r\n  timestamp,\r\n} from \"../firebase/config\";\r\nimport { ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\r\nimport { collection, doc, setDoc } from \"firebase/firestore\";\r\n\r\nconst useStorage = (file) => {\r\n  const [progress, setProgress] = useState(0);\r\n  const [error, setError] = useState(null);\r\n  const [url, setUrl] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const storageRef = ref(projectStorage, file.name);\r\n    const collectionRef = doc(collection(projectFirestore, \"images\"));\r\n\r\n    const uploadTask = uploadBytesResumable(storageRef, file);\r\n\r\n    uploadTask.on(\r\n      \"state_changed\",\r\n      (snapshot) => {\r\n        let percentage =\r\n          (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n        setProgress(percentage);\r\n      },\r\n      (err) => {\r\n        setError(err);\r\n      },\r\n      () => {\r\n        getDownloadURL(uploadTask.snapshot.ref).then(async (url) => {\r\n          const createdAt = timestamp();\r\n          await setDoc(collectionRef, {\r\n            url: url,\r\n            createdAt: createdAt,\r\n          });\r\n          setUrl(url);\r\n        });\r\n      }\r\n    );\r\n  }, [file]);\r\n\r\n  return { progress, url, error };\r\n};\r\n\r\nexport default useStorage;\r\n","import React, { useEffect } from \"react\";\r\nimport useStorage from \"../hooks/useStorage\";\r\n\r\nconst ProgressBar = ({ file, setFile }) => {\r\n  const { url, progress } = useStorage(file);\r\n  console.log(progress, url);\r\n\r\n  useEffect(() => {\r\n    if (url) {\r\n      setFile(null);\r\n    }\r\n  }, [url, setFile]);\r\n  return <div className=\"progress-bar\" style={{ width: progress + \"%\" }}></div>;\r\n};\r\n\r\nexport default ProgressBar;\r\n","import React, { useState } from \"react\";\r\nimport ProgressBar from \"./ProgressBar\";\r\n\r\nconst UploadForm = () => {\r\n  const [file, setFile] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  const types = [\"image/png\", \"image/jpeg\"];\r\n  const changeHandler = (e) => {\r\n    let selected = e.target.files[0];\r\n    console.log(selected);\r\n    if (selected && types.includes(selected.type)) {\r\n      setFile(selected);\r\n      setError(\"\");\r\n    } else {\r\n      setFile(null);\r\n      setError(\"On my mamma u better get ur raggedy files types outta herr\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form>\r\n      <input type=\"file\" onChange={changeHandler} />\r\n      <div className=\"output\">\r\n        {error && <div className=\"error\"> {error}</div>}\r\n        {file && <div> {file.name} </div>}\r\n        {file && <ProgressBar file={file} setFile={setFile} />}\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default UploadForm;\r\n","import React, { useState } from \"react\";\n\nconst PasswordBox = ({ setIsValidated }) => {\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  const uwu = \"ladydemitrescub\";\n  const handleTyping = (e) => {\n    setPassword(e.target.value);\n  };\n  const handleClick = () => {\n    setError(\"\");\n    if (password === uwu) {\n      setIsValidated(true);\n    } else {\n      setError(\"wrong password\");\n    }\n  };\n\n  return (\n    <div className=\"password-box\">\n      <p>Wanna upload an image? Type the password</p>\n      <input type=\"password\" value={password} onChange={handleTyping} />\n      <button className=\"booba\" onClick={handleClick}>\n        yeehaw\n      </button>\n      {error && <p style={{ color: \"red\" }}>{error}</p>}\n    </div>\n  );\n};\n\nexport default PasswordBox;\n//validate password here, then if true or false? pass to props through callback to app.js\n","import React, { useState } from \"react\";\nimport ImageGrid from \"./comps/ImageGrid\";\nimport Title from \"./comps/Title\";\nimport UploadForm from \"./comps/UploadForm\";\nimport PasswordBox from \"./comps/PasswordBox\";\n\nfunction App() {\n  const [isValidated, setIsValidated] = useState(false);\n  return (\n    <div className=\"App\">\n      <Title />\n      <ImageGrid />\n      <hr />\n      <PasswordBox setIsValidated={setIsValidated} />\n      {isValidated && <UploadForm />}\n    </div>\n  );\n}\n\nexport default App;\n\n//only render upload form if password validation is complete\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA"],"sourceRoot":""}